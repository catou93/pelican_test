#! /usr/bin/env python

PACKAGE='pelican_catherine'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

ENABLE_CTRL      = gen.const("ENABLE_CTRL",      int_t, 0x00000001, "enable_ctrl")
NEW_REFERENCES   = gen.const("NEW_REFERENCES",   int_t, 0x00000002, "new_references")
#NEW_PARAMETERS   = gen.const("NEW_PARAMETERS",   int_t, 0x00000004, "drone_parameter")
CONTROLLER_GAIN  = gen.const("CONTROLLER_GAIN",  int_t, 0x00000008, "controller_gain")
#LOE              = gen.const("LOE",              int_t, 0x01000000, "lost_of_control_effectiveness")

group1 = gen.add_group("group_control")
group2 = gen.add_group("group_waypoint_references")
#group3 = gen.add_group("group3_drone_parameters")
group4 = gen.add_group("group_controller_gains")

#          Name                     Type      Reconfiguration level     Description                Default    Min    Max
gen.add("RESET",                    bool_t,   0,                        "reset parameters, gains", False)

test_mode_enum = gen.enum([ gen.const("TEST_MANUAL",     int_t, 0, "Manual test"),
                            gen.const("TEST_WAYPOINT",   int_t, 1, "Waypoint test"),
                            gen.const("TEST_TRACKING",   int_t, 2, "Circular tracking test")],
                            "An enum to chose test mode")
gen.add("test_mode", int_t, 0, "test mode", 0, 0, 2, edit_method=test_mode_enum)

group1.add("enable_take_off",       bool_t,   ENABLE_CTRL["value"],     "enable take off",         False)                   # ENABLE_CTRL["value"] = 0x00000001
group1.add("enable_landing",        bool_t,   ENABLE_CTRL["value"],     "enable landing",          False)
group1.add("send_waypoint",         bool_t,   ENABLE_CTRL["value"],     "send new waypoint",       False)
group1.add("new_controller_gains",  bool_t,   ENABLE_CTRL["value"],     "change controller gains", False)

group2.add("ref_x",                 double_t,  NEW_REFERENCES["value"], "X position reference",    0.0,     -2.0,   2.0)
group2.add("ref_y",                 double_t,  NEW_REFERENCES["value"], "Y position reference",    0.0,     -2.0,   2.0)
group2.add("ref_z",                 double_t,  NEW_REFERENCES["value"], "Z position reference",    0.5,      0.0,   1.5)
group2.add("ref_yaw_deg",           double_t,  NEW_REFERENCES["value"], "yaw angle reference",     0.0,     -180.0, 180.0)

# pelican - tau_x = 1.2, tau_y = 1.2, tau_z = 0.75, tau_p = 2
group4.add("kx",     double_t, CONTROLLER_GAIN["value"],"k-x",    144.4579)
group4.add("kvx",    double_t, CONTROLLER_GAIN["value"],"k-xd",   170.4778)
group4.add("kix",    double_t, CONTROLLER_GAIN["value"],"k-ix",   77.1738)
group4.add("kpx",    double_t, CONTROLLER_GAIN["value"],"k-px",   29.2832)

group4.add("ky",     double_t, CONTROLLER_GAIN["value"],"k-y",    -143.0185)
group4.add("kvy",    double_t, CONTROLLER_GAIN["value"],"k-yd",   -170.3244)
group4.add("kiy",    double_t, CONTROLLER_GAIN["value"],"k-iy",   -76.4086)
group4.add("kpy",    double_t, CONTROLLER_GAIN["value"],"k-py",   -29.4913)

group4.add("kz",     double_t, CONTROLLER_GAIN["value"],"k-z",    6.0946)
group4.add("kvz",    double_t, CONTROLLER_GAIN["value"],"k-zd",   227.4637)
group4.add("kiz",    double_t, CONTROLLER_GAIN["value"],"k-iz",   5.2278)
group4.add("kpz",    double_t, CONTROLLER_GAIN["value"],"k-pz",   191.8977)

group4.add("kphi",   double_t, CONTROLLER_GAIN["value"],"k-phi",  425.7266)
group4.add("kp",     double_t, CONTROLLER_GAIN["value"],"k-p",    68.9277)

group4.add("ktheta", double_t, CONTROLLER_GAIN["value"],"k-theta",425.8627)
group4.add("kq",     double_t, CONTROLLER_GAIN["value"],"k-q",    69.0205)

group4.add("kpsi",   double_t, CONTROLLER_GAIN["value"],"k-psi",  8.0367)
group4.add("kr",     double_t, CONTROLLER_GAIN["value"],"k-r",    188.7292)
group4.add("kipsi",  double_t, CONTROLLER_GAIN["value"],"k-ipsi", 2.5777)
group4.add("kppsi",  double_t, CONTROLLER_GAIN["value"],"k-ppsi", 57.2223)

exit(gen.generate(PACKAGE, "pelican_catherine", "controllerDyn"))
