#
# file : Makefile (Windows)
#
#  Example of a stand-alone makefile for compiler-generated C/C++ shared library files
#
#  Copyright 1999-2016 The MathWorks, Inc.
#  $Revision.4 $  
#

#
# You can invoke this Makefile using 
#  nmake /f Makefile.nmake MATLABROOT=[directory where MATLAB is installed]
#
# If you do not want to specify the MATLABROOT at the gmake command line 
# every time, you can define it by uncommenting the line below
# and assigning the correct root of MATLAB (with no trailing '/') on
# the right hand side.
#
# MATLABROOT	=
#

!IF !DEFINED(MATLABROOT)
!ERROR MATLABROOT must be defined on the command line [e.g.: "MATLABROOT=c:\matlab"], as an environment variable, or in Makefile.nmake.
!ENDIF

#
# Defaults
#

MCC=$(MATLABROOT)\bin\win64\mcc
MBUILD=$(MATLABROOT)\bin\mbuild
#

C_TARGETS=matrixdriver.exe triangle.exe catcherror.exe

CPP_TARGETS=matrixdriverp.exe trianglep.exe catcherrorp.exe

STANDALONE_TARGETS=$(C_TARGETS) $(CPP_TARGETS)


# Use the following target to build and test all the executables
bnt_exes: build_all
	@echo "*********** testing matrixdriver ***********"
	matrixdriver.exe
	@echo "*********** testing matrixdriverp ***********"
	matrixdriverp.exe
	@echo "*********** testing triangle ***********"
	triangle.exe
	@echo "*********** testing trianglep ***********"
	trianglep.exe
	@echo "*********** testing catcherror ***********"
	catcherror.exe
	@echo "*********** testing catcherrorp ***********"
	catcherrorp.exe
	
# This target will only build all the executables
build_all: $(STANDALONE_TARGETS)

# This target will only build the C++ targets
only_cpp: $(CPP_TARGETS)

# This target will only build the C targets
only_c: $(C_TARGETS)

# The following targets build individual executables


# This target will create a C shared library and header file, 
# then compile an executable that uses them.
matrixdriver.exe: matrixdriver.c addmatrix.m eigmatrix.m multiplymatrix.m
	$(MCC) -l -o libmatrix addmatrix.m eigmatrix.m multiplymatrix.m
	$(MBUILD) matrixdriver.c -L. -lmatrix

# This target is like the previous except that it creates
# a C++ shared library and header file.
matrixdriverp.exe: matrixdriver.cpp addmatrix.m eigmatrix.m multiplymatrix.m
	$(MCC) -B cpplib:libmatrixp addmatrix.m eigmatrix.m multiplymatrix.m
	$(MBUILD) matrixdriver.cpp -L. -lmatrixp -output $@

# This target will create a C shared library and header file, 
# then compile an executable that uses them.
triangle.exe: triangle.c sierpinski.m
	$(MCC) -l -o libtriangle sierpinski.m
	$(MBUILD) triangle.c -L. -ltriangle

# This target is like the previous except that it creates
# a C++ shared library and header file.
trianglep.exe: triangle.cpp sierpinski.m
	$(MCC) -B cpplib:libtrianglep sierpinski.m
	$(MBUILD) triangle.cpp -L. -ltrianglep -output $@

# This target will create a C shared library and header file, 
# then compile an executable that uses them.
catcherror.exe:  catcherror.c realacos.m reveal.m
	$(MCC) -l -o libcatcherror realacos.m reveal.m
	$(MBUILD) catcherror.c -L. -lcatcherror

# This target is like the previous except that it creates
# a C++ shared library and header file.
catcherrorp.exe:  catcherror.cpp realacos.m reveal.m
	$(MCC) -B cpplib:libcatcherrorp realacos.m reveal.m
	$(MBUILD) catcherror.cpp -L. -lcatcherrorp -output $@

clean: pseudotarget
	del /f $(STANDALONE_TARGETS)

reallyclean: pseudotarget 
	del /s /q /f $(STANDALONE_TARGETS) \
	    magicsquare.h magicsquare.c magicsquare_main.c \
		libPkg* libMult* libtriangle* libmatrix* \
		*.xml *.ctf *_mcr \
		*_main.c *.exports lib* \
		collect_one_external.h mccExcludedFiles.log \
		output\*
	rmdir /s /q libPkg_mcr \
		libMultpkg_mcr libmatrix_mcr \
		libtrianglp_mcr libtriangle_mcr \
		libmatrixp_mcr output

pseudotarget:
